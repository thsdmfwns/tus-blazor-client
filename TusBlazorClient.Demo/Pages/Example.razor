@page "/Example"
@inject TusClient TusClient

<input type="file" @ref="_fileElement"/>
<button onclick="@Upload">upload</button>

@code {
    private ElementReference _fileElement;
    private TusUpload? _tusUpload;
    
    private async Task Upload()
    {
        // Get the selected file from the input element
        var file =  (await TusClient.GetFileInputElement(_fileElement).GetFiles()).First();
        // Get the selected file's info
        var fileInfo = await file.GetFileInfo();
        // Create a new tus upload
        var opt = new TusOptions
        {
            Endpoint = new Uri("http://localhost:1080/files"),
            Metadata = new Dictionary<string, string>()
            {
                {"filename", fileInfo.Name},
            },
            OnError = (err) =>
            {
                Console.WriteLine($"Failed because: {err.ErrorMessage}");
            },
            OnProgress = (bytesUploaded, bytesTotal) =>
            {
                var percentage = (double)bytesUploaded / bytesTotal;
                Console.WriteLine($"{bytesUploaded} {bytesTotal} {percentage:F}%");
            },
            OnSuccess = async () =>
            {
                var url = await _tusUpload.GetUrl();
                Console.WriteLine($"Download {fileInfo.Name} from {url}");
            },
        };
        _tusUpload = await TusClient.Upload(file, opt);
        
        // Check if there are any previous uploads to continue.
        var previousUploads = await _tusUpload.FindPreviousUpload();
        if (previousUploads.Count > 0)
        {
            // Found previous uploads so we select the first one.
            await _tusUpload.ResumeFromPreviousUpload(previousUploads.First());
        }
        
        // Start the upload
        await _tusUpload.Start();
    }
}