@page "/shouldRetry"
@inject TusClient TusClient
@implements IAsyncDisposable
<h3 id="DemoName">shouldRetry</h3>
<text>url</text>
<input id="url" type="text" @bind="_url"/>
<br/>
<text>chunk size</text>
<input id="chunkSize" type="text" @bind="chunkSize"/>
<br/>
<text>file</text>
<input id="file" type="file" @ref="_fileElement"/>
<br/>
<button id="upload-btn" onclick="@upload">upload</button>
<br/>
<textarea id="output" style="max-width: 100%;" cols="50" rows="20">@_output</textarea>
@code {
    private string _output = "";
    private TusUpload _tusUpload;
    string? _url = "";
    string? chunkSize = "";
    private ElementReference _fileElement;
    private int retryCount = 1;
    
    public async ValueTask DisposeAsync()
    {
        await _tusUpload.DisposeAsync();
        await TusClient.DisposeAsync();
    }

    private async Task upload()
    {
        var file =  (await TusClient.GetFileInputElement(_fileElement).GetFiles()).First();
        var opt = new TusOptions
        {
            ChunkSize = long.TryParse(chunkSize, out var size) ? size : null,
            Endpoint = new Uri(_url),
            OnProgress = (bytesend, total) =>
            {
                _output += $"byte Sent : {bytesend} | total : {total}\n";
                StateHasChanged();
            },
            OnSuccess = () =>
            {
                _output += "Upload Success\n";
                StateHasChanged();
            },
            OnError = (err) =>
            {
                _output += $"===OnError\n";
                _output += $"err : {err.ErrorMessage}\n";
                StateHasChanged();
                retryCount = 0;
            },
            RetryDelays = new List<int>() {1, 1, 1, 1, 1},
            OnShouldRetry = (_, _) =>
            {
                _output += $"===OnShouldRetry\n";
                _output += $"trycount = {retryCount++} \n";
                return true;
            },
            Metadata = new Dictionary<string, string>(){{"test", "test"}, {"test2", "test2"}},
        };
        _tusUpload = await TusClient.Upload(file, opt);
        await _tusUpload.Start();
    }
}